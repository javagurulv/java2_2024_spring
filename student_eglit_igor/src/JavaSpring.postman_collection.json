{
	"info": {
		"_postman_id": "66112b0d-c97f-4e7c-9e2d-fa07a5343e6b",
		"name": "JavaSpring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31282756"
	},
	"item": [
		{
			"name": "Fields validation",
			"item": [
				{
					"name": "Valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"All fields are valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "personFirstName empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive personFirstName error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"personFirstName\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "personFirstName null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive personFirstName error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"personFirstName\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : null,\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "personLastName empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive personLastName error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"personLastName\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "personLastName null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive personLastName error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"personLastName\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : null,\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DateFrom empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive DateFrom error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"agreementDateFrom\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"\",\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DateFrom null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive DateFrom error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"agreementDateFrom\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : null,\r\n\"agreementDateTo\" : \"{{twoDaysAhead}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DateTo empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive DateTo error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"agreementDateTo\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DateTo null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive DateTo error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"agreementDateTo\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Must not be empty!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DateTo befor DateFrom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Should receive DateTo error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].field).to.eql(\"agreementDateTo\");\r",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"agreementDateTo must be after agreementDateFrom!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"personFirstName\" : \"Vasja\",\r\n\"personLastName\" : \"Pupkin\",\r\n\"agreementDateFrom\" : \"{{nextDay}}\",\r\n\"agreementDateTo\" : \"{{oneDayBefore}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set(\"base_url\", \"http://localhost:8080/insurance/travel/\");",
					"",
					"let currentDate = new Date();",
					"let currentDay = currentDate.toISOString().split('T')[0];",
					"",
					"let nextDay = new Date(currentDate);",
					"nextDay.setDate(currentDate.getDate() + 1);",
					"let nextDayFormatted = nextDay.toISOString().split('T')[0];",
					"// var nextDay = moment().add(1, 'day').format('YYYY-MM-DD');",
					"",
					"let twoDaysAhead = new Date(currentDate);",
					"twoDaysAhead.setDate(currentDate.getDate() + 2);",
					"let twoDaysAheadFormatted = twoDaysAhead.toISOString().split('T')[0];",
					"",
					"let oneDayBefore = new Date(currentDate);",
					"oneDayBefore.setDate(currentDate.getDate() - 1);",
					"let oneDayBeforeFormatted = oneDayBefore.toISOString().split('T')[0];",
					"",
					"pm.globals.set(\"currentDay\", currentDay);",
					"pm.globals.set(\"nextDay\", nextDayFormatted);",
					"pm.globals.set(\"twoDaysAhead\", twoDaysAheadFormatted);",
					"pm.globals.set(\"oneDayBefore\", oneDayBeforeFormatted);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}