class TravelMedicalRiskCalculation {
  BigDecimal calculatePremium(request);
  return CountryDefaultDayPremium * DayCount * AgeCoefficient * InsuranceLimitCoefficient; - Формула расчёта премии для медицинского риска
}

1. CountryDefaultDayPremium - дневная премия в стране посещения.

public interface CountryPremiumService {
 BigDecimal getCountryDefaultDayPremium(String country);
}

class CountryPremiumServiceImpl implements CountryPremiumService {

@Override
    public BigDecimal getCountryDefaultDayPremium(String country) {
        return countryDefaultDayPremiums.getOrDefault(country, BigDecimal.ZERO);
    }
}

private Map<String, BigDecimal> countryDefaultDayPremiums;
(Map.of("Latvia -> 2.0; "Poland -> 4.0));

2.0; 4.0 - дневная премия в зависимости от страны;


2. DayCount - количество дней пребывания клиента в стране.

public interface DayCountService {
long getDayCount(Date insuranceDateFrom, Date insuranceDateTo);
}

class DayCountServiceImpl implements DayCountService {

 @Override
 long getDayCount(Date insuranceDateFrom, Date insuranceDateTo);
 lond difference - insuranceDateFrom() - insuranceDateTo();
 return TimeUnit.DAYS.convert(difference, TimeUnit.MILLISECONDS);
}


3. AgeCoefficient - коэффициент зависящий от возраста клиента.

public interface AgeCoefficientService {
 BigDecimal getAgeCoefficient(int age);
}

class AgeCoefficientServiceImpl implements AgeCoefficientService {

 @Override
 public BigDecimal getAgeCoefficient(int age) {
   if (age < 10) {
      return BigDecimal.valueOf(0.5);
   } else if (11 < age < 17) {
     return BigDecimal.valueOf(0.8);
   } else if (18 < age < 25) {
     return BigDecimal.valueOf(1.2);
   } else if (26 < age < 50) {
     return BigDecimal.valueOf(1.3);
   } else {
     return BigDecimal.valueOf(2.0);
   }

  }

 }
 0.5; 0.8; 1.2; 1.3; 2.0; - для каждого возраста свой коэффициент


 4. InsuranceLimitCoefficient - коэффициент зависящий от лимита страхования.

 public interface InsuranceLimitCoefficientService {
  BigDecimal getInsuranceLimitCoefficient(BigDecimal insuranceLimit);
 }

 class InsuranceLimitCoefficientServiceImpl implements InsuranceLimitCoefficientService {
 public BigDecimal getInsuranceLimitCoefficient(BigDecimal insuranceLimit) {
   if (insuranceLimit.compareTo(BigDecimal.valueOf(10000))) {
      return BigDecimal.valueOf(1.0);
   } else if (insuranceLimit.compareTo(BigDecimal.valueOf(15000))) {
      return BigDecimal.valueOf(1.5);
   }

  }

 }

