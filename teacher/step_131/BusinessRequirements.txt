1. Каждый запрос должен включать в себя имя и фамилию заявителя. Запросы без указания фамилии следует считать
   некорректными и отклонять.

2. Каждый запрос должен включать в себя дату начала поездки (agreementDateFrom).
   Запросы без указания этой даты следует считать некорректными и отклонять.

3. Каждый запрос должен включать в себя дату окончания поездки (agreementDateTo).
   Запросы без указания этой даты следует считать некорректными и отклонять.

4. Каждый запрос должен содержать дату начала поездки (agreementDateFrom) и
   дату окончания поездки (agreementDateTo), при этом дата окончания должна быть позже даты начала.
   Запросы, в которых дата окончания поездки меньше или равна дате начала, следует считать некорректными и отклонять.

5. Система должна принимать на вход даты из будущего периода, а не из прошлого.
   Расчет стоимости полиса должен производиться исключительно на основе этих будущих дат.
   Система должна отвергать любые попытки ввода дат из прошлого.

6. Система расчета стоимости страхового полиса для путешественников должна основываться на выбранных клиентом рисках,
   от которых он хочет застраховаться.
   Стоимость полиса должна быть суммой стоимости страховки для каждого выбранного риска.
   Требования:
   Система должна предоставлять клиенту возможность выбора различных рисков, от которых он желает застраховаться
   (медицинские расходы, отмена поездки, утеря багажа, ответственность перед третьими лицами, эвакуация и репатриация, активный отдых).
   Расчет стоимости страхового полиса должен производиться как сумма стоимости страховки для каждого выбранного риска.
   Клиент должен выбрать как минимум один риск, от которого он желает застраховаться.
   Система должна четко отображать, какие риски были выбраны клиентом и соответствующую стоимость страховки для каждого.

7. Бизнес принял решение реализовать расчет стоимости страхового полиса для медицинского риска в первую очередь,
   прежде чем добавлять другие риски. Бизнес ожидает, что после реализации расчета для медицинского риска,
   система будет готова к запуску в производство.
   Остальные риски будут добавляться в систему постепенно после запуска.
   Информация о расчете стоимости медицинского риска
   Возраст клиента: чем старше клиент, тем выше вероятность медицинских проблем во время путешествия.
   Страховые компании предлагают различные тарифы для разных возрастных групп.
   Длительность путешествия: чем дольше путешествие, тем выше вероятность медицинских проблем.
   Страховые компании могут предлагать различные тарифы в зависимости от продолжительности поездки.
   Страны посещения: в некоторых странах медицинские расходы могут быть очень высокими,
   поэтому страховые компании могут устанавливать более высокую стоимость для покрытия медицинских расходов в этих странах.
   Страховой лимит: чем выше лимит страхового покрытия, тем выше стоимость медицинского риска в страховом полисе.
   Формула расчета стоимости медицинского риска
   premium = CountryDefaultDayPremium * DayCount * AgeCoefficient * InsuranceLimitCoefficient

8. Система должна рассчитывать премию страхового полиса для путешественников,
   учитывая премии для каждого выбранного риска в отдельности.
   Система должна отображать в ответе на запрос информацию о премии для каждого выбранного риска,
   а также общую премию страхового полиса.
   Система должна использовать термин "premium" вместо "price" при описании стоимости страхового полиса,
   в соответствии с принятой в бизнесе терминологией.
   Приложение должно быть построено таким образом, чтобы позволять добавлять новые риски в будущем,
   не нарушая существующую логику работы системы.
   Архитектура системы должна обеспечивать возможность последовательного внедрения расчетов премий для различных рисков,
   начиная с медицинского риска, без потери работоспособности всей системы.

9. Система должна поддерживать следующие уровни лимита страхового покрытия медицинского риска:
   LEVEL_10000 - максимальная выплата 10000 евро
   LEVEL_15000 - максимальная выплата 15000 евро
   LEVEL_20000 - максимальная выплата 20000 евро
   LEVEL_50000 - максимальная выплата 50000 евро
   Для каждого уровня лимита бизнес должен иметь возможность задавать свое значение коэффициента InsuranceLimitCoefficient.
   Система должна предоставлять бизнесу возможность включать/выключать функциональность,
   связанную с использованием коэффициента InsuranceLimitCoefficient в расчете премии медицинского риска.
   Если функциональность выключена, то коэффициент не должен учитываться в расчете.

10. Необходимо реализовать функциональность включения/выключения коэффициента AgeCoefficient при расчете премии медицинского страхования,
    аналогично тому, как это было сделано для коэффициента InsuranceLimitCoefficient в предыдущем задании.
    Бизнес должен иметь возможность легко и быстро управлять использованием коэффициента AgeCoefficient,
    чтобы при необходимости иметь возможность его отключить.
    Реализация должна быть выполнена таким образом, чтобы обеспечить гибкость и масштабируемость системы,
    позволяя в будущем добавлять аналогичные переключатели для других коэффициентов.

11. Бизнес требует, чтобы приложение всегда проверяло корректность значения medicalRiskLimitLevel,
    вне зависимости от состояния флага medical.risk.limit.level.enabled или содержимого поля selected_risks.
    Это необходимо для обеспечения целостности и надежности расчетов, выполняемых приложением.

12. Бизнес требует, чтобы поле country было обязательным для заполнения независимо от того,
    какие типы рисков были выбраны в поле selected_risks. Это связано с тем, что данный продукт является страховкой для поездок,
    и страна пребывания является критически важной информацией для расчета правильной страховой премии.

13. Реализовать в приложении функциональность, которая будет автоматически выполнять необходимые
    SQL-скрипты для создания структуры базы данных и заполнения таблиц начальными значениями при запуске приложения.
    Обеспечить, чтобы данная функциональность срабатывала только при первом запуске приложения или
    при изменении структуры базы данных, чтобы не выполнять ненужные операции при последующих запусках.
    Предусмотреть обработку возможных ошибок, возникающих при выполнении SQL-скриптов, и обеспечить
    соответствующее логирование для облегчения диагностики проблем.

14. Клиент хочет предоставить своим сотрудникам и партнерам более удобный интерфейс для работы с приложением.
    Веб-страница должна стать дополнительным каналом взаимодействия с приложением, наряду с существующими.
    Функциональность: Веб-страница должна содержать форму для ввода всех необходимых параметров,
    необходимых для расчета страховой премии. После ввода данных, должен производиться расчет премии и отображаться результат.

15. Разработка in-memory версии приложения: Необходимо реализовать возможность работы приложения с in-memory базой данных,
    без необходимости установки и настройки MySQL на локальных компьютерах тестировщиков.
    Обеспечение функциональной эквивалентности: Приложение с in-memory базой данных должно быть функционально эквивалентно версии,
    работающей с MySQL, чтобы тестировщики могли воспроизводить и проверять все необходимые сценарии.
    Простота развертывания: Процесс установки и запуска in-memory версии приложения должен быть максимально простым и не
    требовать дополнительной настройки со стороны тестировщиков.

16. Добавление расчета стоимости для группы лиц: Необходимо реализовать возможность расчета стоимости
    страхового полиса для группы лиц (например, семьи из 4 человек).
    Пользователь должен иметь возможность ввода количества застрахованных человек и получения общей стоимости полиса.
    Сохранение существующей функциональности: Первая версия веб-интерфейса и REST API должна продолжать работать
    без изменений, чтобы не нарушить существующие интеграции клиентов с данной версией.
    Обеспечение плавного перехода: Необходимо обеспечить плавный переход для клиентов с использованием старой версии
    на новую версию с поддержкой расчета для групп, возможно, с использованием механизма версионирования API.

17. Необходимо реализовать возможность указания параметра medicalRiskLimitLevel для каждой застрахованной
    персоны индивидуально, а не на уровне всего страхового полиса.

18. Необходимо проверить, есть ли в текущей тестовой базе автоматические тесты
    для выявленных проблемных сценариев. Если тесты отсутствуют, то следует разработать и добавить их.
    Запрос с одним несуществующим риском (selectedRisks) возвращает ошибку с кодом ERROR_CODE_6.
    Запрос с двумя несуществующими рисками (selectedRisks) возвращает множественные ошибки с кодом ERROR_CODE_6.
    Запрос с null значением для страны (country) и типом риска TRAVEL_MEDICAL возвращает ошибку с кодом ERROR_CODE_10.
    Запрос с пустым значением для страны (country) и типом риска TRAVEL_MEDICAL возвращает ошибку с кодом ERROR_CODE_10.


