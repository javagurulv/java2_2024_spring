Для начала реализации нам необходимо добавить соответствующую
зависимость в наш build.gradle файл.

После добавления зависимости и выполнения сборки вы увидите,
что большая часть наших тестов, которые работали ранее, теперь
проваливаются, несмотря на то, что мы не изменили ни одной
строки в нашем коде.

Это происходит потому, что Spring Security поставляется с
некоторыми включенными настройками безопасности по умолчанию.
Вы также можете запустить приложение и протестировать его через
Postman или веб-интерфейс. Вы увидите, что запрос Postman
возвращает HTTP-статус ответа 401 Unauthorized, но при попытке
доступа к нашему приложению через веб-интерфейс мы теперь видим
страницу авторизации, которой раньше не было. Эта страница
также предоставляется дефолтными настройками безопасности
Spring.

Ваша задача: в пакете insurance создать пакет config и
создать файл конфигурации SecurityConfig.java. Наша первая
задача по конфигурации будет отключить дефолтные настройки
безопасности, чтобы вернуть успешную сборку проекта.

Для этого используйте SecurityChainConfiguration. На данный
момент нам нужно настроить две вещи:

- разрешить все запросы без авторизации;
- отключить Cross Site Request Forgery (CSRF) токен (мы не
будем использовать его в нашей реализации).

Если вам интересно, вы можете найти в интернете дополнительную
информацию и узнать, что такое атаки Cross Site Request
Forgery (CSRF) и как CSRF токены используются для
предотвращения этих атак.